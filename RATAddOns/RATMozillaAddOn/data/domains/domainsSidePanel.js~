var sidebar = require("sdk/ui/sidebar");
var data = require('sdk/self').data;
var simplePrefs = require("sdk/simple-prefs");
var ss = require("sdk/simple-storage");
var Request = require("sdk/request").Request;
var commentWnd = require('../comment-dlg/commentWnd');
var tabs = require("sdk/tabs");

var {Cc, Ci, Cu} = require("chrome");
var mediator = Cc['@mozilla.org/appshell/window-mediator;1'].getService(Ci.nsIWindowMediator);

var domainsSidePanel;
var workerArray = [];
var domainsSidePanelWorker;

var currentDomainName;// = ss.storage.currentDomainName;
var currentDomainUUID;// = ss.storage.currentDomainUUID;
var currentUserUUID;// = ss.storage.userUUID;
var currentSessionID;// = ss.storage.sessionID;
var currentURL =  tabs.activeTab.url.indexOf("about:") > -1 ? null : tabs.activeTab.url;
var ratURL;// = simplePrefs.prefs.ratURL;
var tabWorker = null;

console.log("domainsSidePanel.js currentURL: " + currentURL);
console.log("domainsSidePanel.js ratURL: " + ratURL);

function resetSidePanel(){
}

function openSidePanel(){
	var json = ss.storage.lastResponseText

	currentSessionID = ss.storage.sessionID;
	ratURL = simplePrefs.prefs.ratURL;
	currentUserUUID = ss.storage.userUUID;
	currentDomainUUID = ss.storage.currentDomainUUID;
	currentDomainName = ss.storage.currentDomainName;

	console.log("domainsSidePanel.js currentDomainName: " + currentDomainName);
	console.log("domainsSidePanel.js currentDomainUUID: " + currentDomainUUID);
	console.log("domainsSidePanel.js currentUserUUID: " + currentUserUUID);
	console.log("domainsSidePanel.js currentSessionID: " + currentSessionID);

	domainsSidePanel = sidebar.Sidebar({
		id: 'domains-sidepanel',
		title: 'Domains',
		url: data.url("./domains/domainsSidePanel.html"),
		contentScriptFile: data.url('./domains/pageScripts.js'),
		onHide: hideSidebar,
		onDetach: detachWorker,
		onReady: function (worker) {
			workerArray.push(worker);
			domainsSidePanelWorker = worker;

			worker.port.emit("message", 'data', json);
			worker.port.emit("message", 'sessionid', currentSessionID);
			worker.port.emit("message", 'raturl', ratURL);
			worker.port.emit("message", 'sessionid', currentSessionID);
			worker.port.emit("message", 'useruuid', currentUserUUID);
			worker.port.emit("message", 'currentdomainuuid', currentDomainUUID);
			worker.port.emit("message", 'currentdomainname', currentDomainName);
			worker.port.emit("message", 'currenturl', currentURL);

			worker.port.on("message", function(command, domainName, domainUUID, data) {
				console.log("domainsSidePanel.js worker.port.on command: " + command);
				switch (command){
					case 'newdomain':

					break;

					case 'getuserdomains':

					break;

					case 'domainselected':
						//console.log("domainsSidePanel.js worker.port.on text: " + command);
						//console.log("domainsSidePanel.js worker.port.on domainName: " + domainName);
						//console.log("domainsSidePanel.js worker.port.on currentDomainUUID: " + domainUUID);
						ss.storage.currentDomainUUID = domainUUID;
						ss.storage.currentDomainName = domainName;
						currentDomainName = domainName;
						currentDomainUUID = domainUUID;

					break;

					case 'opencomment-dlg':
						//console.log("opencomment-dlg: " + data.text);
						commentWnd.openWindow(domainName, domainUUID, data);
					break;

					case 'selectionNode':
						console.log("domainsSidePanel.js selectionNode: " + data);
						if(tabWorker){
							// Per ora non disegno le selezioni perchÃ© non so come si fa.
							//tabWorker.port.emit("message", "selection", data);
						}
					break;
				}
			});
		}
	});

	domainsSidePanel.show();
}

function detachWorker(worker) {
	console.log("detachWorker worker: " + worker);
	var index = workerArray.indexOf(worker);
	if(index != -1) {
		workerArray.splice(index, 1);
	}
}

function hideSidebar(){
	console.log("domainsSidePanel.js hideSidebar");
	domainsSidePanel.dispose();
}

tabs.on('open', function onOpen(tab) {
	if(domainsSidePanelWorker){
		domainsSidePanelWorker.port.emit("message", "currenturl", null);
	}
});


var selectionData = null;
var timerID = null;
var menuItem = null;
var { setTimeout, clearTimeout } = require("sdk/timers");
var ContextMenu = require("sdk/context-menu");
var { addItem, removeItem } = require("sdk/context-menu").Menu;

ContextMenu.Item({
	label: "Add annotation",
	contentScript: 'self.on("click", self.postMessage);',
	onMessage: function () {
		console.log("onMessage");
		if(timerID){
			clearTimeout(timerID);	
			console.log("clearTimeout: " + timerID);
			timerID = null;
		}

		if(selectionData){
/*
			console.log("domainSidePanel.js: onMessage.selectionData: " + selectionData);
			console.log("domainSidePanel.js: onMessage.selectionData.buttonCode: " + selectionData.buttonCode);
			console.log("domainSidePanel.js: onMessage.selectionData.startPageX: " + selectionData.startPageX);
			console.log("domainSidePanel.js: onMessage.selectionData.startPageY: " + selectionData.startPageY);
			console.log("domainSidePanel.js: onMessage.selectionData.pageX: " + selectionData.endPageX);
			console.log("domainSidePanel.js: onMessage.selectionData.pageY: " + selectionData.endPageY);
			console.log("domainSidePanel.js: onMessage.selectionData.title: " + selectionData.title);
			console.log("domainSidePanel.js: onMessage.selectionData.text: " + selectionData.text);
*/
/*
			var commandData = {
				sessionID : currentSessionID,
				currentDomainUUID: currentDomainUUID, 
				currentDomainName: currentDomainName,
				ownerUUID: currentDomainUUID,
				userUUID: currentUserUUID, 
				startpagex: selectionData.startPageX, 
				endpagex: selectionData.endPageX,
				startpagey: selectionData.startPageY, 
				endpagey: selectionData.endPageY,
				currentURL: currentURL, 
				text: selectionData.text, 
				title: selectionData.title
			};
*/
			var commandData = {
				sessionID : currentSessionID,
				currentDomainUUID: currentDomainUUID, 
				currentDomainName: currentDomainName,
				ownerUUID: currentDomainUUID,
				userUUID: currentUserUUID, 
				selectionData: selectionData,
				currentURL: currentURL, 
				text: selectionData.text, 
				title: selectionData.title
			};
			// Verso commentWnd.js -> openWindow
			commentWnd.openWindow(currentDomainName, currentDomainUUID, commandData);
		}
		selectionData = null;
	}
});

tabs.on('ready', function(tab) {
	if(domainsSidePanelWorker){
		tabWorker = tab.attach({
			contentScriptFile: require('sdk/self').data.url('./domains/SendSelectedText.js')
		});

		tabWorker.port.on("message", onTabWorkerMessage);

		currentURL = tab.url.indexOf("about:") > -1 ? null : tab.url;
	  	console.log(tab.url);
		domainsSidePanelWorker.port.emit("message", "currenturl", currentURL);
	}
});

// Da SendSelectedText.js -> handleMouseMove
function onTabWorkerMessage(commandData){
	console.log("onTabWorkerMessage: " + commandData); 
/*
	console.log("domainSidePanel.js: onTabWorkerMessage.commandData.buttonCode: " + commandData.buttonCode);
	console.log("domainSidePanel.js: onTabWorkerMessage.commandData.startPageX: " + commandData.startPageX);
	console.log("domainSidePanel.js: onTabWorkerMessage.commandData.startPageY: " + commandData.startPageY);
	console.log("domainSidePanel.js: onTabWorkerMessage.commandData.pageX: " + commandData.endPageX);
	console.log("domainSidePanel.js: onTabWorkerMessage.commandData.pageY: " + commandData.endPageY);
	console.log("domainSidePanel.js: onTabWorkerMessage.commandData.title: " + commandData.title);
	console.log("domainSidePanel.js: onTabWorkerMessage.commandData.text: " + commandData.text);
*/
	if(timerID){
		clearTimeout(timerID);	
		console.log("clearTimeout: " + timerID);
		timerID = null;
	}

	if(!selectionData){
		selectionData = commandData;
		timerID = setTimeout(function() {
			console.log("timeout:");
			selectionData = null;
		}, 30000)
	}
}

tabs.on('activate', function (tab) {
	if(domainsSidePanelWorker){
		tabWorker = tab.attach({
			contentScriptFile: require('sdk/self').data.url('./domains/SendSelectedText.js')
		});
		tabWorker.port.on("message", onTabWorkerMessage);

		var url = tab.url.indexOf("about:") > -1 ? null : tab.url;
	  	console.log(tab.url);
		domainsSidePanelWorker.port.emit("message", "currenturl", url);
	}
});

function detachWorker(worker) {
	console.log("detachWorker worker: " + worker);
	var index = workerArray.indexOf(worker);
	if(index != -1) {
		workerArray.splice(index, 1);
	}
}

function setComment(commandData){
/*
	console.log("domainSidePanel.js: setComment.commandData.currentSessionID: " + commandData.currentSessionID);
	console.log("domainSidePanel.js: setComment.commandData.currentDomainUUID: " + commandData.currentDomainUUID);
	console.log("domainSidePanel.js: setComment.commandData.currentDomainName: " + commandData.currentDomainName);
	console.log("domainSidePanel.js: setComment.commandData.currentDomainUUID: " + commandData.currentDomainUUID);
	console.log("domainSidePanel.js: setComment.commandData.currentUserUUID: " + commandData.currentUserUUID);
	console.log("domainSidePanel.js: setComment.commandData.startpagex: " + commandData.startpagex);
	console.log("domainSidePanel.js: setComment.commandData.endpagex: " + commandData.endpagex);
	console.log("domainSidePanel.js: setComment.commandData.startpagey: " + commandData.startpagey);
	console.log("domainSidePanel.js: setComment.commandData.endpagey: " + commandData.endpagey);
	console.log("domainSidePanel.js: setComment.commandData.currentURL: " + commandData.currentURL);
	console.log("domainSidePanel.js: setComment.commandData.title: " + commandData.title);
	console.log("domainSidePanel.js: setComment.commandData.text: " + commandData.text);
*/
	//console.log("commentsSidePanel.js setComment title: " + title);
	//console.log("commentsSidePanel.js setComment comment: " + comment);

	//domainsSidePanelWorker.port.emit("message", "title", title);
	//domainsSidePanelWorker.port.emit("message", "comment", comment);

	// Verso pageScripts.js -> addon.port.on("message",
	domainsSidePanelWorker.port.emit("message", "comment", commandData);
}

exports.openSidePanel = openSidePanel;
exports.resetSidePanel = resetSidePanel;
exports.setComment = setComment;
