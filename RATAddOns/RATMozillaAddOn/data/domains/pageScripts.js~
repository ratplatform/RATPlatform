var ratUrl;
var sessionID;
var currentDomainUUID;
var currentDomainName;
var ratUrl;
var userUUID;
var title;
//var comment;
var currentURL;
var menuItems;
var stack = new Array();

addon.port.on("message", function(msgType, text) {
	//console.log("pageScripts.js domainsSidePanel.js message msgType: " + msgType + " text: " + text);
	switch (msgType){
		case 'data':
			var data = [];
			var obj = JSON.parse(text);
			var inc = 0;
			if(obj == null){
				return;
			}

			for(var domain in obj.userDomains){
				var domainUUID = obj.userDomains[domain];
				data[inc] = {label: domain, id: domainUUID,};
				inc++;
			}

			menuItems = obj.plugInContextMenu;
			console.log("pageScripts.js domainsSidePanel.html menuItems: " + menuItems);
			$("#commentsContainer").contextmenu({
			    delegate: ".window",
			    menu: menuItems,
			    select: function(event, ui) {
				//alert("select " + ui.cmd + " on " + ui.target.text() + " parent " + ui.target.context.parentNode);

				var parentID = ui.target.context.parentNode.id;

				var obj = document.getElementById("uuid_" + parentID);
				var uuid = obj.value;
				console.log("id: " + "uuid_" + parentID);
				console.log("uuid: " + uuid);

				console.log("id: " + "title_" + parentID);
				obj = document.getElementById("title_" + parentID);
				var title = obj.innerHTML;
				//alert(obj);

				obj = document.getElementById("text_" + parentID);
				var text = obj.innerHTML;

				//alert(obj);
				//alert(text);
				if(uuid){
					addComment('>>' + text + '<<\n', 'Re: ' + title, uuid);
/*
					var commandData = {
						sessionID : sessionID,
						currentDomainUUID: currentDomainUUID, 
						currentDomainName: currentDomainName,
						ownerUUID: uuid,
						userUUID: userUUID, 
						start: -1, 
						end: -1, 
						currentURL: currentURL, 
						text: '>>' + text + '<<\n', 
						title: 'Re: ' + title
					};
					executeMenuCommand(ui.cmd, commandData);
*/
				}

			    }
			});

			$("#userDomainsTree").tree({
				data: data,
				autoOpen: 1
			});
		break;

		case 'raturl':
			ratUrl = text;
			//console.log("pageScripts.js domainsSidePanel.html ratUrl: " + ratUrl);
		break;

		case 'sessionid':
			sessionID = text;
			//console.log("pageScripts.js domainsSidePanel.html sessionID: " + sessionID);
		break;

		case 'currentdomainname':
			currentDomainName = text;
			$("#currentDomainName").html(text);
		break;

		case 'currentdomainuuid':
			currentDomainUUID = text;
			if(currentDomainUUID){
				$("#addComment").prop("disabled", false);
			}
			else{
				$("#addComment").prop("disabled", true);
			}
		break;

		case 'useruuid':
			userUUID = text;
		break;

		//case 'title':
			//title = text;
		//break;

		case 'comment':
			if(text){
				var commentsBox = document.getElementById("commentsContainer");
				commentsBox.innerHTML = "";

				addNewComment(text);
			}
			else{
				console.log("comments.js title is null");
				alert("title is null");
			}
		break;

		case 'currenturl':
			currentURL = text;
			enableAddComment();
		break;
	}

});

function addNewComment(commentData){
/*
	console.log("pageScript.js: addNewComment.commentData.currentSessionID: " + commentData.currentSessionID);
	console.log("pageScript.js: addNewComment.commentData.currentDomainUUID: " + commentData.currentDomainUUID);
	console.log("pageScript.js: addNewComment.commentData.currentDomainName: " + commentData.currentDomainName);
	console.log("pageScript.js: addNewComment.commentData.currentDomainUUID: " + commentData.currentDomainUUID);
	console.log("pageScript.js: addNewComment.commentData.currentUserUUID: " + commentData.currentUserUUID);
	console.log("pageScript.js: addNewComment.commentData.startpagex: " + commentData.startpagex);
	console.log("pageScript.js: addNewComment.commentData.endpagex: " + commentData.endpagex);
	console.log("pageScript.js: addNewComment.commentData.startpagey: " + commentData.startpagey);
	console.log("pageScript.js: addNewComment.commentData.endpagey: " + commentData.endpagey);
	console.log("pageScript.js: addNewComment.commentData.currentURL: " + commentData.currentURL);
	console.log("pageScript.js: addNewComment.commentData.title: " + commentData.title);
	console.log("pageScript.js: addNewComment.commentData.text: " + commentData.text);

			var commandData = {
				sessionID : currentSessionID,
				currentDomainUUID: currentDomainUUID, 
				currentDomainName: currentDomainName,
				ownerUUID: currentDomainUUID,
				userUUID: currentUserUUID, 
				selectionData: selectionData,
				currentURL: currentURL, 
				text: selectionData.text, 
				title: selectionData.title
			};
*/
	var wsUrl = ratUrl + "/v0.1/executeconfigurationcommand?sessionid=" + commentData.sessionID;
	AddCommentSet(currentDomainUUID, commentData.selectionData,
		commentData.title, commentData.text, commentData.currentURL, commentData.userUUID, commentData.ownerUUID);
	console.log("AddComment: " + JSON.stringify(AddComment));
	var request = new Request();
	request.sendRequest(wsUrl, "POST", JSON.stringify(AddComment), addCommentResponse, addCommentError);
}

function addComment(title, text, ownerUUID){
	var commandData = {
		sessionID : sessionID,
		currentDomainUUID: currentDomainUUID, 
		currentDomainName: currentDomainName,
		ownerUUID: ownerUUID,
		userUUID: userUUID, 
		jsoncoordinates: "",
		currentURL: currentURL, 
		text: title, 
		title: text
	};
	executeMenuCommand('reply', commandData);
}

function enableAddComment(){
	if(currentDomainUUID && currentURL){
		$("#addComment").prop("disabled", false);
	}
	else{
		$("#addComment").prop("disabled", true);
	}
}

function Request(){
    this.sendRequest = function(url, method, jsonText, successCallback, errorCallBack) {
		$.ajax({
			url: url,
			method: method,
			data: jsonText,
			dataType: 'text',
			contentType: "text/plain",
			success: successCallback,
			error: errorCallBack
		}); 
    };
}

function getUserDomains(req) {
	//console.log("pageScripts.js domainsSidePanel.html getUserDomains: " + req);
	//console.log("pageScripts.js domainsSidePanel.html getUserDomains Response received: " + req.responseText.indexOf("nodes"));
	if(req.indexOf("nodes") > -1){
		var json = JSON.parse(req);
		if(json.header.commandName == "GetAllDomainComments"){
			// TODO: da capire perch√© succede
			return;
		}

		var config = {dataSource : json};
		var alchemy = new Alchemy(config);
		//console.log("pageScripts.js domainsSidePanel.html getUserDomains alchemy.allNodes().length: " + alchemy.allNodes().length);
		//console.log("pageScripts.js domainsSidePanel.html getUserDomains currentNodeUUID: " + currentDomainUUID);
		var arrayLength = alchemy.allNodes().length;
		for (var i = 0; i < arrayLength; i++) {
		    var node = alchemy.allNodes()[i];//alchemy.getNodes(i);
			if(typeof node == 'undefined'){
				console.log("pageScripts.js domainsSidePanel.html getUserDomains node[0] typeof is undefined ");
				continue;
			}

			//console.log("pageScripts.js domainsSidePanel.html getUserDomains node[0] typeof: " + typeof node);
			//console.log("pageScripts.js domainsSidePanel.html getUserDomains node.length: " + node.length);
			var domainUUID = node.getProperties("VertexUUIDField");
			var domainName = node.getProperties("domainName");
			//console.log("pageScripts.js domainsSidePanel.html getUserDomains alchemy node domainName: " + domainName);
			//console.log("pageScripts.js domainsSidePanel.html getUserDomains alchemy node domainUUID: " + domainUUID);

			append(currentDomainUUID, domainName, domainUUID);
		}
	}
}

function errorGetUserDomains(jqXHR, textStatus, errorThrown){
	console.log("pageScripts.js domainsSidePanel.html errorGetUserDomains jqXHR: " + jqXHR);
	console.log("pageScripts.js domainsSidePanel.html errorGetUserDomains textStatus: " + textStatus);
}

function append(parentNodeID, childNodeName, childNodeID){
	var parentNode = $("#userDomainsTree").tree('getNodeById', parentNodeID);
	var child = $("#userDomainsTree").tree('getNodeById', childNodeID);
	//console.log("pageScripts.js currentDomainUUID append node child: " + child);
	if(!child){
		$("#userDomainsTree").tree('appendNode',{
			label: childNodeName,
			id: childNodeID
		}, parentNode);
	}
}

function addNewDomainResponse(req) {
	//console.log("newDomain Response received: " + req);
	var json = JSON.parse(req);
	var newUUID = json.settings.VertexUUIDField;
	//console.log("newDomain Response received newUUID: " + newUUID);
	GetAllDomainsSet(newUUID, newUUID);
	//getAllDomains(newUUID, newUUID);
	//console.log("GetAllDomains: " + JSON.stringify(GetAllDomains));
	var wsUrl = ratUrl + "/v0.1/query?sessionid=" + sessionID;
	//console.log("url: " + wsUrl);
	var request = new Request();
	request.sendRequest(wsUrl, "POST", JSON.stringify(GetAllDomains), getUserDomains, errorGetUserDomains);
}

function onChange(event){
	//alert(event.target.value);
	var domainName = document.getElementById("currentDomain").innerHTML;
	var selection = event.target.options[event.target.selectedIndex].text;
	var uuid = event.target.value;

	var breadcrumb = document.getElementById("breadcrumb");
	breadcrumb.innerHTML = "";
	stack = new Array();

	if(domainName == selection){
		removeAllComments();

		var wsUrl = ratUrl + "/v0.1/query?sessionid=" + sessionID;
		GetAllDomainCommentsSet(uuid, uuid, userUUID, currentURL);
		var request2 = new Request();
		request2.sendRequest(wsUrl, "POST", JSON.stringify(GetAllDomainComments), getDomainAndUserComments, errorGetUserDomains);
	}
	else{
		getSubComments(uuid, selection);
	}
}

//jsPlumb.ready(function () {
$(document).ready(function() {
	console.log("domainsSidePanel.html: ready");

	$("#addNewDomain").prop('disabled', true);
	$("#addComment").prop("disabled", true);
	$("#delComment").prop("disabled", true);

	$("#currentDomainName").html(currentDomainName);

	$("#breadcrumb").bind("change", onChange);

	$("#addComment").click(function(){
		addComment('', '', userUUID);
/*
		var commandData = {
			sessionID : sessionID,
			currentDomainUUID: currentDomainUUID, 
			currentDomainName: currentDomainName,
			ownerUUID: currentDomainUUID,
			userUUID: userUUID, 
			start: -1, 
			end: -1, 
			currentURL: currentURL, 
			text: '', 
			title: ''
		};
		executeMenuCommand('reply', commandData);
*/
	}); 
/**/
	$(".window").resizable({
		minHeight: 160,
		minWidth: 160,
		resize : function(event, ui) {            
			jsPlumb.repaint(ui.helper);
		}
	});

	$(".textContainer").mousedown(function(e){
		e.preventDefault();
		var parentID = $(this).parent().attr('id');
		console.log("mousedown content. parent: " + parentID);
		jsPlumb.setDraggable(parentID, false)
	});

	$(".textContainer").mouseup(function(e){
		e.preventDefault();
		var parentID = $(this).parent().attr('id');
		console.log("mouseup content. parent: " + parentID);
		jsPlumb.setDraggable(parentID, true)
	});
/**/

	$("#userDomainsTree").bind('tree.click', function(event) {
		if(!sessionID){
			alert("Please login");
			return;
		}

		var selectBox = document.getElementById("breadcrumb");
		selectBox.innerHTML = "";
		stack = new Array();
		var commentsBox = document.getElementById("commentsContainer");
		commentsBox.innerHTML = "";
		//jsPlumb.empty("commentsContainer");

		var node = event.node;
		//console.log(node.id);

		document.getElementById("currentDomain").innerHTML = node.name;
		//document.getElementById("currentDomainUUID").value = node.id;
		//console.log("pageScripts.js currentDomainUUID: " + document.getElementById("currentDomainUUID").value);
		currentDomainUUID = node.id;
		console.log("domainSidePanel.html currentDomainUUID: " + currentDomainUUID);

		if(currentDomainUUID || currentDomainUUID.length > 0){
			//sendResponse("domainselected", node.name, currentDomainUUID);
			addon.port.emit("message", "domainselected", node.name, currentDomainUUID);

			enableAddComment();

			$("#addNewDomain").prop('disabled', false);
			GetAllDomainsSet(node.id, node.id);
			//console.log("domainSidePanel.html GetAllDomains: " + JSON.stringify(GetAllDomains));

			var wsUrl = ratUrl + "/v0.1/query?sessionid=" + sessionID;
			//console.log("pageScripts.js url: " + wsUrl);
			var request = new Request();
			request.sendRequest(wsUrl, "POST", JSON.stringify(GetAllDomains), getUserDomains, errorGetUserDomains);
			removeAllComments();

			if(currentURL){
				GetAllDomainCommentsSet(currentDomainUUID, currentDomainUUID, userUUID, currentURL);
				console.log("GetAllDomainComments: " + JSON.stringify(GetAllDomainComments));
				var request2 = new Request();
				request2.sendRequest(wsUrl, "POST", JSON.stringify(GetAllDomainComments), getDomainAndUserComments, errorGetUserDomains);
			}
		}
		else{
			alert("Error in domain selection");
		}

		//event.preventDefault();
	});

	$("#addNewDomain").click(function() {
		//alert("click");
		//var currentDomainUUID = document.getElementById("currentDomainUUID").value;
		if (!currentDomainUUID){
			alert("Please select a domain");
			return;
		}

		console.log("domainSideBar.html currentDomainUUID: " + currentDomainUUID);
		var domain = $("#domainName").val();
		if (!domain){
			alert("Please add a domain name");
			return;
		}

		domain = domain.trim();
		$("#domainName").val(domain);
		var n = domain.length;
		if (n == 0){
			alert("Please insert a valid domain name");
			return;
		}

		if(!isValidText(domain)){
			alert("Please insert a valid domain name; permitted characters are alphanumeric characters, dot, underscore and minus sign");
			return;
		}

		//alert(domain);
		var wsUrl = ratUrl + "/v0.1/executeconfigurationcommand?sessionid=" + sessionID;
		console.log("url: " + wsUrl);
		AddNewDomainSet(currentDomainUUID, domain, domain, currentDomainUUID);
		//console.log("AddNewCommand: " + JSON.stringify(AddNewDomain));
		var request = new Request();
		request.sendRequest(wsUrl, "POST", JSON.stringify(AddNewDomain), addNewDomainResponse, errorGetUserDomains);
	});
});

/**/

/*
function addNewComment(title, text){
	var wsUrl = ratUrl + "/v0.1/executeconfigurationcommand?sessionid=" + sessionID;
	AddCommentSet(currentDomainUUID, currentDomainUUID, userUUID, -1, -1, currentURL, text, title);
	console.log("AddComment: " + JSON.stringify(AddComment));
	var request = new Request();
	request.sendRequest(wsUrl, "POST", JSON.stringify(AddComment), addCommentResponse, addCommentError);
}
*/

function addCommentResponse(req) {
	removeAllComments();

	console.log("pageScripts.js addCommentResponse: " + req);

	var json = JSON.parse(req);
	var newUUID = json.settings.VertexUUIDField;
	//console.log("newDomain Response received newUUID: " + newUUID);
	GetAllDomainCommentsSet(currentDomainUUID, currentDomainUUID, userUUID, currentURL);
	//getAllDomains(newUUID, newUUID);
	console.log("addCommentResponse: " + JSON.stringify(GetAllDomainComments));
	var wsUrl = ratUrl + "/v0.1/query?sessionid=" + sessionID;
	console.log("url: " + wsUrl);
	var request = new Request();
	request.sendRequest(wsUrl, "POST", JSON.stringify(GetAllDomainComments), getDomainAndUserComments, errorGetUserDomains);

	//console.log("comments.js addCommentResponse Response received: " + req.responseText.indexOf("nodes"));
}

function getSubComments(uuid, title){
	if(stack.length < 1){
		var domainName = document.getElementById("currentDomain").innerHTML;

		var stackData = {
			uuid: currentDomainUUID,
			label: domainName
		};
		stack.push(stackData);
	}

	var stackData = {
		uuid: uuid,
		label: title
	};
	stack.push(stackData);

	GetCommentCommentsSet(currentDomainUUID, uuid);
	console.log("getSubComments: " + JSON.stringify(GetCommentComments));
	var wsUrl = ratUrl + "/v0.1/query?sessionid=" + sessionID;
	var request = new Request();
	request.sendRequest(wsUrl, "POST", JSON.stringify(GetCommentComments), addSubComments, errorGetUserDomains);
}

function addSubComments(req){
	console.log("addSubComments: " + req);

	if(req.indexOf("nodes") > -1){
		removeAllComments();

		var selectBox = document.getElementById("breadcrumb");
		selectBox.innerHTML = "";

		for(i = 0; i < stack.length; i++){
			var stackData = stack[i];
			if(i == stack.length - 1){
				$('#breadcrumb').append('<option selected="true" value="' + stackData.uuid + '">' + stackData.label + '</option');
			}
			else{
				$('#breadcrumb').append('<option value="' + stackData.uuid + '">' + stackData.label + '</option');
			}
		}
		var json = JSON.parse(req);
		var config = {dataSource : json};
		var alchemy = new Alchemy(config);
		var array = alchemy.allNodes();
		addSubNodes(array, json.header.RootVertexUUID);
	}
}

function getDomainAndUserComments(req) {
	//console.log("pageScripts.js domainsSidePanel.html getDomainAndUserComments: " + req);
	//console.log("pageScripts.js domainsSidePanel.html getDomainAndUserComments Response received: " + req.responseText.indexOf("nodes"));
	if(req.indexOf("nodes") > -1){
		var config = {dataSource : JSON.parse(req)};
		var alchemy = new Alchemy(config);
		var array = alchemy.allNodes();
		addNode(array);
	}
}

function sendSelectionNode(coordinates){
	//addon.port.emit("message", "domainselected", node.name, currentDomainUUID);
	//self.port.emit("onSelectionNode", "selectionNode", node);
	console.log("sendSelectionNode coordinates: " + coordinates);
	addon.port.emit("message", "selectionNode", "", "", coordinates);
}

function addCommentError(jqXHR, textStatus, errorThrown){
	console.log("comments.js errorGetUserDomains jqXHR: " + jqXHR);
	console.log("comments.js addCommentError textStatus: " + textStatus);
}

