{
    "commandType": "ConfigurationCommands",
    "commandName": "CreateCollaborationDomainConfiguration",
    "application": "RATPlatform",
    "applicationVersion": "2.0",
    "commandVersion": "0.1",
    "domainName": "@domainPlaceholder@",

    "settings": {
        "nodeContentKey": "Content",
        "semanticPrefix": "!#",
        "cloudBaseURL": "{1}",
        "clientURI": "",
        "userCommandsInstructionsParameters": {
            "selectedTargets": {
                "comment": ["Identifies targets of a new annotation or an existing one."],
                "returnType": "array"
            },
            "inputFromUser": {
                "comment": [
                    "Identifies text user input of annotation only in these commands and with rules:                                 ",
                    "    Command 'comment: text user input of new annotation.                                                        ",
                    "    Command 'modify': text user input of new annotation that will have selectedTargets as targets.              ",
                    "    Command 'reply': text entered by user (as new annotation) to be the reply text of the annotation.           "
                ],
                "returnType": "string"
            },
            "inputVisibilityFromUser": {
                "comment": [
                    "available values are is-public, is-private, is-universal",
                    "It can be evaluated only '<semanticPrefix>is-private' or '<semanticPrefix>is-public', or '<semanticPrefix>is-universal'."
                ],
                "returnType": "string"
            },
            "annotationAttributes": {
                "comment": ["e.g.: [ { 'is-depth': '6' }, { 'is-verticalPixel': '19093' }, { 'some key from annotationAttributesKeys': ' a value ' } ]"],
                "returnType": "array"
            },
            "newHTML": {
                "comment": ["It has to be evaluated with the html edited by bR on CopyPage command."],
                "returnType": "string"
            },
            "newHASH": {
                "comment": ["It has to be evaluated with the hashDocument after local editing by bR on CopyPage command."],
                "returnType": "string"
            },
            "userName": {
                "comment": ["It has to be evaluated with the user identifier that requests for the modify attribute in modify_{attribute} command."],
                "returnType": "string"
            }
        },
        "userCommands": {
            "comment": {
                "position": "contextual",
                "operative": "yes",
                "label": "Comment",
                "instructions": [
                    "a = annotate(selectedTargets, inputFromUser, annotationAttributes)",
                    "annotate(a, inputVisibilityFromUser, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "inputFromUser",
                    "inputVisibilityFromUser",
                    "annotationAttributes"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED",
                    "TARGETS_VISIBILITY_COMPLIANCE_RULE_IS_SATISFIED",
                    "TRIMMERED_TEXT_IS_NOT_BLANK"
                ]
            },
            "delete": {
                "position": "annotation",
                "operative": "yes",
                "icon": "http://149.132.178.114:8080/RATbR/img/DeleteRAT.png",
                "label": "Delete",
                "instructions": [
                    "annotate(selectedTargets, '<semanticPrefix>is-deleted', null)"
                ],
                "parameters": [
                    "selectedTargets"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED",
                    "IS_SAME_OWNERSHIP",
                    "ANNOTATION_CHILDHOOD_IS_ALL_OF_SAME_OWNERSHIP"
                ]
            },
            "modify": {
                "position": "annotation",
                "operative": "yes",
                "icon": "{2}",
                "label": "Modify",
                "instructions": [
                    "annotate(selectedTargets, '<semanticPrefix>is-deprecated', null)",
                    "a = annotate(selectedTargets, inputFromUser, annotationAttributes)",
                    "annotate(a, inputVisibilityFromUser, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "inputFromUser",
                    "inputVisibilityFromUser",
                    "annotationAttributes"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED",
                    "IS_SAME_OWNERSHIP",
                    "ANNOTATION_CHILDHOOD_IS_NOT_PRESENT",
                    "IS_SAME_DEPTH",
                    "TRIMMERED_TEXT_IS_NOT_BLANK"
                ]
            },
            "modify_visibility": {
                "position": "hidden",
                "operative": "yes",
                "instructions": [
                    "b = get(selectedTargets, visibility)",
                    "comment: In get() you can ask for either visibility or any of the annotationAttributes",
                    "annotate(b, '<semanticPrefix>is-deprecated', null)",
                    "annotate(b, inputVisibilityFromUser, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "inputVisibilityFromUser"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED",
                    "IS_SAME_OWNERSHIP",
                    "VISIBILITY_OF_TARGETS_OF_SELECTEDTARGETS_MUST_BE_COMPLIANT_TO_VISIBILITY_RULE",
                    "CHILDHOOD_VISIBILITY_COMPLIANCE_RULE_IS_SATISFIED"
                ]
            },
            "modify_verticalPixel": {
                "position": "hidden",
                "operative": "yes",
                "instructions": [
                    "b = get(selectedTargets, verticalPixel, userName)",
                    "comment: In get() you can ask for either verticalPixel or any of the annotationAttributes",
                    "annotate(b, '<semanticPrefix>is-deprecated', null)",
                    "annotate(b, null, annotationAttributes)"
                ],
                "parameters": [
                    "selectedTargets",
                    "annotationAttributes",
                    "userName"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED"
                ]
            },
            "reply": {
                "position": "contextual",
                "operative": "yes",
                "label": "Reply",
                "instructions": [
                    "a = annotate(selectedTargets, inputFromUser, annotationAttributes)",
                    "b = annotate(a, '<semanticPrefix>is-reply', null)",
                    "annotate(a, inputVisibilityFromUser, null)",
                    "annotate(b, inputVisibilityFromUser, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "inputFromUser",
                    "inputVisibilityFromUser",
                    "annotationAttributes"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED",
                    "IS_NOT_SAME_OWNERSHIP",
                    "TRIMMERED_TEXT_IS_NOT_BLANK"
                ]
            },
            "iLike": {
                "position": "contextual",
                "operative": "yes",
                "label": "I like",
                "instructions": [
                    "a = annotate(selectedTargets, '<semanticPrefix>is-like-it', annotationAttributes)",
                    "annotate(a, inputVisibilityFromUser, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "inputVisibilityFromUser",
                    "annotationAttributes"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED",
                    "IS_NOT_SAME_OWNERSHIP"
                ]
            },
            "iDontLike": {
                "position": "contextual",
                "operative": "yes",
                "label": "I don't like",
                "instructions": [
                    "a = annotate(selectedTargets, '<semanticPrefix>is-dont-like-it', annotationAttributes)",
                    "annotate(a, inputVisibilityFromUser, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "inputVisibilityFromUser",
                    "annotationAttributes"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED",
                    "IS_NOT_SAME_OWNERSHIP"
                ]
            },
            "copyPage": {
                "position": "contextual",
                "operative": "yes",
                "label": "Copy",
                "instructions": [
                    "d = createNewDocument(selectedTargets, newHTML, newHASH)",
                    "tag = annotate(selectedTargets, '<semanticPrefix>is-copied', annotationAttributes)",
                    "annotate(tag, inputVisibilityFromUser, null)",
                    "annotate(selectedTargets, '<semanticPrefix>is-deprecated', null)",
                    "annotate(selectedTargets, d, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "newHTML",
                    "newHASH",
                    "inputVisibilityFromUser",
                    "annotationAttributes"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED"
                ]
            },
            "tag": {
                "position": "contextual",
                "operative": "yes",
                "label": "Tag",
                "instructions": [
                    "a = annotate(selectedTargets, <semanticPrefix> + inputFromUser, annotationAttributes)",
                    "annotate(a, inputVisibilityFromUser, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "inputFromUser",
                    "inputVisibilityFromUser",
                    "annotationAttributes"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TRIMMERED_TEXT_IS_NOT_BLANK",
                    "TEXT_MUST_NOT_CONTAIN_WHITE_SPACES"
                ]
            },
            "important": {
                "position": "contextual",
                "operative": "yes",
                "label": "Important",
                "instructions": [
                    "a = annotate(selectedTargets, '<semanticPrefix>is-important', annotationAttributes)",
                    "annotate(a, inputVisibilityFromUser, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "inputVisibilityFromUser",
                    "annotationAttributes"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED",
                    "IS_NOT_SAME_OWNERSHIP"
                ]
            },
            "toExtract": {
                "position": "contextual",
                "operative": "yes",
                "label": "To extract",
                "instructions": [
                    "a = annotate(selectedTargets, '<semanticPrefix>is-to-extract', annotationAttributes)",
                    "annotate(a, inputVisibilityFromUser, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "inputVisibilityFromUser",
                    "annotationAttributes"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED",
                    "IS_NOT_SAME_OWNERSHIP"
                ]
            },
            "iAgree": {
                "position": "contextual",
                "operative": "yes",
                "label": "I agree",
                "instructions": [
                    "a = annotate(selectedTargets, '<semanticPrefix>is-i-agree', annotationAttributes)",
                    "annotate(a, inputVisibilityFromUser, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "inputVisibilityFromUser",
                    "annotationAttributes"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED",
                    "IS_NOT_SAME_OWNERSHIP"
                ]
            },
            "iDontAgree": {
                "position": "contextual",
                "operative": "yes",
                "label": "I don't agree",
                "instructions": [
                    "a = annotate(selectedTargets, '<semanticPrefix>is-dont-agree', annotationAttributes)",
                    "annotate(a, inputVisibilityFromUser, null)"
                ],
                "parameters": [
                    "selectedTargets",
                    "inputVisibilityFromUser",
                    "annotationAttributes"
                ],
                "constraints": [
                    "CURRENT_PAGE_IS_NOT_DEPRECATED",
                    "TARGETS_NOT_DELETED",
                    "TARGETS_NOT_DEPRECATED",
                    "IS_NOT_SAME_OWNERSHIP"
                ]
            }
        },
        "security": {
            "comment": "these are passed by the bR every time an annotate command is invoked",
            "userName": "",
            "domainName": "",
            "urlDocument": "",
            "hashDocument": "",
            "hashDomainConfiguration": ""
        },
        "annotationAttributesKeys": [
            "comment: these are passed by the bR to maintain every specific parameter of an annotation (e.g. rendering aspects of Rat Panel)",
            "is-depth",
            "is-verticalPixel",
            "is-shape",
            "is-coords",
            "is-color"
        ],
        "systemKeys": [
            "comment: these are key used by the Server to maintain RAT Graph topology.",
            "is-system",
            "is-user",
            "is-user-of",
            "is-administrator-of",
            "is-domain",
            "is-domain-configuration",
            "is-configuration-for",
            "belongs-to",
            "is-private-domain",
            "is-document-page",
            "is-copied",
            "is-selection",
            "is-image",
            "is-marking",
            "is-default-marking",
            "is-timestamp",
            "is-put-by",
            "is-deprecated",
            "is-deleted",
            "is-reply",
            "is-like-it",
            "is-dont-like-it",
            "is-private",
            "is-public",
            "is-universal",
            "is-important",
            "is-to-extract",
            "is-i-agree",
            "is-dont-agree"
        ]
    }
}
